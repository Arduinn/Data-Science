theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1, 1, 1, 1, 1.2, 1.5, 4),
nudge_y = c(1, 1.2, 1, 1, 1, -1.2, 1, 1, 1, -1.5, -1))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "#EEAB45", size = 2) +  # Add refineries as dots
geom_label(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = paste(refinery, "\nCapacity:", capacity)),
size = 3, color = "black", fill = "white",
label.size = 0.25, label.r = unit(0.1, "cm"),
lineheight = 0.8) +  # Adjust offsets for better visibility
labs(title = "Major Refineries in Russia",
subtitle = "Refineries are marked as dots with capacities labeled") +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1, 1, 1, 1, 1.2, 1.5, 2),
nudge_y = c(1, 1.2, 1, 1, 1, -1.2, 1, 1, 1, -1.5, 2))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "#EEAB45", size = 2) +  # Add refineries as dots
geom_label(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = paste(refinery, "\nCapacity:", capacity)),
size = 3, color = "black", fill = "white",
label.size = 0.25, label.r = unit(0.1, "cm"),
lineheight = 0.8) +  # Adjust offsets for better visibility
labs(title = "Major Refineries in Russia",
subtitle = "Refineries are marked as dots with capacities labeled") +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Third Plot
# Updated list of refineries in Russia and their coordinates
refineries_russia <- data.frame(
refinery = c("Komsomolsk", "Angarsk Petrochemical", "Achinsk", "Tuapse",
"Kuibyshev", "Novokuibyshev", "Syzran", "Saratov",
"Ryazan", "BashNeft Complex", "Yaroslavl"),
lon = c(137.0196, 103.9080, 92.9534, 39.0730,
49.2530, 49.6814, 48.4073, 46.0564,
39.6916, 56.0911, 39.8723),
lat = c(50.5495, 52.5947, 56.2694, 44.1084,
53.1973, 53.0951, 53.1487, 51.5335,
54.6081, 54.7751, 57.6265)
)
# Load Russia map data
russia_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name == "Russia")
# Convert refineries data to an sf object
refineries_sf <- st_as_sf(refineries_russia, coords = c("lon", "lat"), crs = 4326)
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1, 1, 1, 1, 1.2, 1.5, 2),
nudge_y = c(1, 1.2, 1, 1, 1, -1.2, 1, 1, 1, -1.5, 2))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 3) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Updated list of refineries in Russia and their coordinates
refineries_russia <- data.frame(
refinery = c("Komsomolsk", "Angarsk Petrochemical", "Achinsk", "Tuapse",
"Kuibyshev", "Novokuibyshev", "Syzran", "Saratov",
"Ryazan", "BashNeft Complex", "Yaroslavl"),
lon = c(137.0196, 103.9080, 92.9534, 39.0730,
49.2530, 49.6814, 48.4073, 46.0564,
39.6916, 56.0911, 39.8723),
lat = c(50.5495, 52.5947, 56.2694, 44.1084,
53.1973, 53.0951, 53.1487, 51.5335,
54.6081, 54.7751, 57.6265)
)
# Third Plot --------------------------------------------------------------
# Load Russia map data
russia_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(name == "Russia")
# Convert refineries data to an sf object
refineries_sf <- st_as_sf(refineries_russia, coords = c("lon", "lat"), crs = 4326)
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1, 1, 1, 1, 1.2, 1.5, 2),
nudge_y = c(1, 1.2, 1, 1, 1, -1.2, 1.5, 1, 1, -1.5, 2))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 3) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1, 1, 1, 1, 1.2, 1.5, 2),
nudge_y = c(1, 1.2, 1, 1, 1, -1.2, 1.75, 1, 1, -1.5, 2))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 3) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1.2, 1, 1, 1, 1.2, 1.5, 2),
nudge_y = c(1, 1.2, 1, 1, 1, -1.2, 1.2, 1, 1, -1.5, 2))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 3) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1.2, 1, 1, 1, 1.2, 1.5, 2.2),
nudge_y = c(1, 1.2, 1, 1, 1, -1.2, 1.2, 1, 1, -1.5, 2))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 3) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 1) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1.2, 1, 1, 1, 1.2, 1.5, 2.2),
nudge_y = c(1, 1.2, 1, 1, 1, -1.2, 1.2, 1, 1, -1.5, 1))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 1) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1.2, 1, 1, 1, 1.2, 1.5, 2.2),
nudge_y = c(1, 1.2, 1, 1, 1.3, -1.2, 1.2, 1, 1, -1.5, 1))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 1) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1.2, 1, 1, 1, 1.2, 1.5, 2.2),
nudge_y = c(1, 1.2, 1, 1, 1.4, -1.2, 1.2, 1, 1, -1.5, 1))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 1) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
# Manually adjust label positions for overlapping locations
label_positions <- refineries_russia %>%
mutate(nudge_x = c(1, 1.5, 1.2, 1, 1.4, 1, 1, 1, 1.2, 1.5, 2.2),
nudge_y = c(1, 1.2, 1, 1, 1.4, -1.2, 1.2, 1, 1, -1.5, 1))
# Plotting
ggplot() +
geom_sf(data = russia_map, fill = "lightgray", color = "white") +
geom_sf(data = refineries_sf, color = "red", size = 1) +  # Add refineries as red dots
geom_text(data = label_positions,
aes(x = lon + nudge_x, y = lat + nudge_y,  # Adjusted positions for labels
label = refinery),
size = 3, color = "black",
nudge_x = label_positions$nudge_x,
nudge_y = label_positions$nudge_y) +
coord_sf(xlim = c(20, 200), ylim = c(40, 80), expand = FALSE) +  # Adjust these limits as needed
theme_minimal() +
theme(axis.text = element_blank(),  # Remove axis text
axis.title = element_blank(),  # Remove axis titles
axis.ticks = element_blank(),  # Remove axis ticks
plot.margin = margin(10, 10, 10, 10))  # Add margins around the plot
650000*0.029563
630000*0.029563
30/12
rm(list=ls())
list.files()
setwd("/Users/victorarduinwecki/Documents/01. Requests/04. BOHO Linear Model")
setwd("~/01. Requests/04. BOHO Linear Model")
rm(list=ls())
library(zoo)
library(ggplot2)
library(readxl)
library(dplyr)
library(openxlsx)
# Specify the path to your Excel file
file_path <- "./data/BOHO_data.xlsx"
df <- read_excel(file_path, sheet = "BOHO", skip = 4)
colnames(df) <- c('Date','BOHO','HO','BO')
df$Date <- as.Date(df$Date)
# Sort the DataFrame by Date in descending order
df <- df %>% arrange(Date)
df_date <- df$Date
# Remove unwanted columns
df <- df[, c('BOHO', 'HO', 'BO')]  # Keep only the necessary columns
rm(list=ls())
# Settings ----------------------------------------------------------------
library(zoo)
library(ggplot2)
library(readxl)
library(dplyr)
library(openxlsx)
# Data --------------------------------------------------------------------
# Specify the path to your Excel file
file_path <- "./data/BOHO_data.xlsx"
df <- read_excel(file_path, sheet = "BOHO", skip = 4)
colnames(df) <- c('Date','BOHO','HO','BO')
df$Date <- as.Date(df$Date)
# Sort the DataFrame by Date in descending order
df <- df %>% arrange(Date)
df_date <- df$Date
# Remove unwanted columns
df <- df[, c('BOHO', 'HO', 'BO')]  # Keep only the necessary columns
df <- as.data.frame(df)
# Check if the columns exist and are numeric
if (!all(c("BOHO", "HO", "BO") %in% colnames(df))) {
stop("One or more columns are missing.")
}
# Check if the data is numeric
df[] <- lapply(df, as.numeric)
# Supondo que df seja o seu DataFrame
cor(df$BOHO, df$HO)
# Supondo que df seja o seu DataFrame
cor(df$BOHO, df$HO)
cor(df$BOHO, df$BO)
df$BOHO
# Supondo que df seja o seu DataFrame
cor(df$BOHO, df$HO)
# Supondo que df seja o seu DataFrame
cor(df$BOHO, df$HO)
rm(list=ls())
# Settings ----------------------------------------------------------------
library(zoo)
library(ggplot2)
library(readxl)
library(dplyr)
library(openxlsx)
# Data --------------------------------------------------------------------
# Specify the path to your Excel file
file_path <- "./data/BOHO_data.xlsx"
df <- read_excel(file_path, sheet = "BOHO", skip = 4)
colnames(df) <- c('Date','BOHO','HO','BO')
df$Date <- as.Date(df$Date)
# Sort the DataFrame by Date in descending order
df <- df %>% arrange(Date)
df_date <- df$Date
# Replace NA values with the value from the row below
df <- df %>%
mutate(across(everything(), ~tidyr::fill(., .direction = "down")))
# Specify the path to your Excel file
file_path <- "./data/BOHO_data.xlsx"
df <- read_excel(file_path, sheet = "BOHO", skip = 4)
colnames(df) <- c('Date','BOHO','HO','BO')
df$Date <- as.Date(df$Date)
# Sort the DataFrame by Date in descending order
df <- df %>% arrange(Date)
df_date <- df$Date
# Replace NA values with the value from the row below
df <- df %>%
mutate(across(everything(), ~tidyr::fill(., .direction = "down")))
df
rm(list=ls())
# Settings ----------------------------------------------------------------
library(zoo)
library(ggplot2)
library(readxl)
library(dplyr)
library(openxlsx)
# Data --------------------------------------------------------------------
# Specify the path to your Excel file
file_path <- "./data/BOHO_data.xlsx"
df <- read_excel(file_path, sheet = "BOHO", skip = 4)
colnames(df) <- c('Date','BOHO','HO','BO')
df$Date <- as.Date(df$Date)
# Sort the DataFrame by Date in descending order
df <- df %>% arrange(Date)
df_date <- df$Date
# Remove unwanted columns
df <- df[, c('BOHO', 'HO', 'BO')]  # Keep only the necessary columns
df <- as.data.frame(df)
# Replace NA values with the value from the row below
df <- df %>%
mutate(across(everything(), ~tidyr::fill(., .direction = "down")))
# Replace NA values with the value from the row below
df <- df %>%
mutate(across(everything(), ~na.locf(., na.rm = FALSE, fromLast = TRUE)))
rm(list=ls())
# Settings ----------------------------------------------------------------
library(zoo)
library(ggplot2)
library(readxl)
library(dplyr)
library(openxlsx)
# Data --------------------------------------------------------------------
# Specify the path to your Excel file
file_path <- "./data/BOHO_data.xlsx"
df <- read_excel(file_path, sheet = "BOHO", skip = 4)
colnames(df) <- c('Date','BOHO','HO','BO')
df$Date <- as.Date(df$Date)
# Sort the DataFrame by Date in descending order
df <- df %>% arrange(Date)
df_date <- df$Date
# Remove unwanted columns
df <- df[, c('BOHO', 'HO', 'BO')]  # Keep only the necessary columns
df <- as.data.frame(df)
# Replace NA values with the value from the row below
df <- df %>%
mutate(across(everything(), ~na.locf(., na.rm = FALSE, fromLast = TRUE)))
# Check if the columns exist and are numeric
if (!all(c("BOHO", "HO", "BO") %in% colnames(df))) {
stop("One or more columns are missing.")
}
# Check if the data is numeric
df[] <- lapply(df, as.numeric)
View(df)
# Checking Correlation Between Variables
cor(df$BOHO, df$HO)
cor(df$BOHO, df$BO)
View(df)
# Gráfico de dispersão entre variavel1 e variavel2
plot(df$HO, df$BOHO, main = "BOHO vs HO", xlab = "HO", ylab = "BOHO")
# Gráfico de dispersão entre variavel1 e variavel3
plot(df$BO, df$BOHO, main = "BOHO vs BO", xlab = "BO", ylab = "BOHO")
# Log transform the variables
log_BOHO <- log(df$BOHO)
log_HO <- log(df$HO)
log_BO <- log(df$BO)
# Calculate the correlation of the log-transformed variables
cor_log_BOHO_HO <- cor(log_BOHO, log_HO)
cor_log_BOHO_BO <- cor(log_BOHO, log_BO)
# Calculate the correlation of the log-transformed variables
cor(log_BOHO, log_HO)
cor(log_BOHO, log_BO)
# Check for zero or negative values
if (any(df$BOHO <= 0) || any(df$HO <= 0) || any(df$BO <= 0)) {
stop("One of the variables contains zero or negative values. Log transformation is not possible.")
}
# Check for zero or negative values
if (any(df$BOHO <= 0) || any(df$HO <= 0) || any(df$BO <= 0)) {
stop("One of the variables contains zero or negative values. Log transformation is not possible.")
}
# Ajustando um modelo de regressão linear múltipla
modelo <- lm(BOHO ~ HO + BO, data = df)
summary(modelo)
library(car)
install.packages("car")
library(car)
# Linear Model
lm_boho <- lm(BOHO ~ HO + BO, data = df)
summary(lm_boho)
# Calculate Variance Inflation Factor (VIF)
vif_values <- vif(lm_boho)
vif_values
library(lmtest)
# Homogeneity of Variance
bptest(lm_boho)
# Normality of Residuals
shapiro.test(residuals(modelo))
# Homogeneity of Variance
bptest(lm_boho)
# Normality of Residuals
shapiro.test(residuals(lm_boho))
# Influential Plots
cooks_d <- cooks.distance(lm_boho)
plot(cooks_d, type = "h", main = "Cook's Distance", ylab = "Distance")
abline(h = 4 / length(cooks_d), col = "red")  # Threshold line
# Shapiro-Wilk test for normality of residuals
shapiro_test <- shapiro.test(residuals(lm_boho))
cat("Shapiro-Wilk test p-value:", shapiro_test$p.value, "\n")
# Homogeneity of Variance
bptest(lm_boho)
# Moving LM Model ---------------------------------------------------------
window_size <- 30  # Tamanho da janela (30 dias)
# Função para calcular os coeficientes da regressão
rolling_regression <- function(data, window_size) {
coefs <- rollapply(data, width = window_size, FUN = function(x) {
# Create a data frame using only the necessary columns
x_df <- as.data.frame(x[, c("BOHO", "HO", "BO")])
# Fit the linear model
model <- lm(BOHO ~ HO + BO, data = x_df)
# Return the coefficients
return(coef(model))
}, by.column = FALSE, fill = NA, align = "right")
return(as.data.frame(coefs))
}
# Aplicar a função de regressão móvel
rolling_results <- rolling_regression(df, window_size)
rolling_results$Date <- df_date
# Move Date to the first position
rolling_results <- rolling_results %>%
select(Date, everything())
# Export to Excel file
write.xlsx(rolling_results, "rolling_results.xlsx")
# Convert to long format for ggplot
rolling_long <- reshape2::melt(rolling_results, id.vars = "Date",
variable.name = "Coefficient",
value.name = "Value")
# Plot the coefficients over time
ggplot(rolling_long, aes(x = Date, y = Value, color = Coefficient)) +
geom_line() +
labs(title = "Rolling Regression Coefficients Over Time",
x = "Date",
y = "Coefficient Value") +
theme_minimal() +
theme(legend.title = element_blank())
